/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root';
import { Route as AboutImport } from './routes/about';
import { Route as DataRouteImport } from './routes/_data/route';
import { Route as IndexImport } from './routes/index';
import { Route as AuthIndexImport } from './routes/auth/index';
import { Route as AuthLoginImport } from './routes/auth/login';
import { Route as DataNaniesIndexImport } from './routes/_data/nanies/index';
import { Route as DataMaidsIndexImport } from './routes/_data/maids/index';
import { Route as DataDriversIndexImport } from './routes/_data/drivers/index';

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any);

const DataRouteRoute = DataRouteImport.update({
  id: '/_data',
  getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any);

const AuthIndexRoute = AuthIndexImport.update({
  id: '/auth/',
  path: '/auth/',
  getParentRoute: () => rootRoute,
} as any);

const AuthLoginRoute = AuthLoginImport.update({
  id: '/auth/login',
  path: '/auth/login',
  getParentRoute: () => rootRoute,
} as any);

const DataNaniesIndexRoute = DataNaniesIndexImport.update({
  id: '/nanies/',
  path: '/nanies/',
  getParentRoute: () => DataRouteRoute,
} as any);

const DataMaidsIndexRoute = DataMaidsIndexImport.update({
  id: '/maids/',
  path: '/maids/',
  getParentRoute: () => DataRouteRoute,
} as any);

const DataDriversIndexRoute = DataDriversIndexImport.update({
  id: '/drivers/',
  path: '/drivers/',
  getParentRoute: () => DataRouteRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_data': {
      id: '/_data';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof DataRouteImport;
      parentRoute: typeof rootRoute;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/login': {
      id: '/auth/login';
      path: '/auth/login';
      fullPath: '/auth/login';
      preLoaderRoute: typeof AuthLoginImport;
      parentRoute: typeof rootRoute;
    };
    '/auth/': {
      id: '/auth/';
      path: '/auth';
      fullPath: '/auth';
      preLoaderRoute: typeof AuthIndexImport;
      parentRoute: typeof rootRoute;
    };
    '/_data/drivers/': {
      id: '/_data/drivers/';
      path: '/drivers';
      fullPath: '/drivers';
      preLoaderRoute: typeof DataDriversIndexImport;
      parentRoute: typeof DataRouteImport;
    };
    '/_data/maids/': {
      id: '/_data/maids/';
      path: '/maids';
      fullPath: '/maids';
      preLoaderRoute: typeof DataMaidsIndexImport;
      parentRoute: typeof DataRouteImport;
    };
    '/_data/nanies/': {
      id: '/_data/nanies/';
      path: '/nanies';
      fullPath: '/nanies';
      preLoaderRoute: typeof DataNaniesIndexImport;
      parentRoute: typeof DataRouteImport;
    };
  }
}

// Create and export the route tree

interface DataRouteRouteChildren {
  DataDriversIndexRoute: typeof DataDriversIndexRoute;
  DataMaidsIndexRoute: typeof DataMaidsIndexRoute;
  DataNaniesIndexRoute: typeof DataNaniesIndexRoute;
}

const DataRouteRouteChildren: DataRouteRouteChildren = {
  DataDriversIndexRoute: DataDriversIndexRoute,
  DataMaidsIndexRoute: DataMaidsIndexRoute,
  DataNaniesIndexRoute: DataNaniesIndexRoute,
};

const DataRouteRouteWithChildren = DataRouteRoute._addFileChildren(DataRouteRouteChildren);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '': typeof DataRouteRouteWithChildren;
  '/about': typeof AboutRoute;
  '/auth/login': typeof AuthLoginRoute;
  '/auth': typeof AuthIndexRoute;
  '/drivers': typeof DataDriversIndexRoute;
  '/maids': typeof DataMaidsIndexRoute;
  '/nanies': typeof DataNaniesIndexRoute;
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '': typeof DataRouteRouteWithChildren;
  '/about': typeof AboutRoute;
  '/auth/login': typeof AuthLoginRoute;
  '/auth': typeof AuthIndexRoute;
  '/drivers': typeof DataDriversIndexRoute;
  '/maids': typeof DataMaidsIndexRoute;
  '/nanies': typeof DataNaniesIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  '/': typeof IndexRoute;
  '/_data': typeof DataRouteRouteWithChildren;
  '/about': typeof AboutRoute;
  '/auth/login': typeof AuthLoginRoute;
  '/auth/': typeof AuthIndexRoute;
  '/_data/drivers/': typeof DataDriversIndexRoute;
  '/_data/maids/': typeof DataMaidsIndexRoute;
  '/_data/nanies/': typeof DataNaniesIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths: '/' | '' | '/about' | '/auth/login' | '/auth' | '/drivers' | '/maids' | '/nanies';
  fileRoutesByTo: FileRoutesByTo;
  to: '/' | '' | '/about' | '/auth/login' | '/auth' | '/drivers' | '/maids' | '/nanies';
  id:
    | '__root__'
    | '/'
    | '/_data'
    | '/about'
    | '/auth/login'
    | '/auth/'
    | '/_data/drivers/'
    | '/_data/maids/'
    | '/_data/nanies/';
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  DataRouteRoute: typeof DataRouteRouteWithChildren;
  AboutRoute: typeof AboutRoute;
  AuthLoginRoute: typeof AuthLoginRoute;
  AuthIndexRoute: typeof AuthIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DataRouteRoute: DataRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  AuthLoginRoute: AuthLoginRoute,
  AuthIndexRoute: AuthIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_data",
        "/about",
        "/auth/login",
        "/auth/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_data": {
      "filePath": "_data/route.tsx",
      "children": [
        "/_data/drivers/",
        "/_data/maids/",
        "/_data/nanies/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/auth/login": {
      "filePath": "auth/login.tsx"
    },
    "/auth/": {
      "filePath": "auth/index.tsx"
    },
    "/_data/drivers/": {
      "filePath": "_data/drivers/index.tsx",
      "parent": "/_data"
    },
    "/_data/maids/": {
      "filePath": "_data/maids/index.tsx",
      "parent": "/_data"
    },
    "/_data/nanies/": {
      "filePath": "_data/nanies/index.tsx",
      "parent": "/_data"
    }
  }
}
ROUTE_MANIFEST_END */
